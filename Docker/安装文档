docker swarm init --advertise-addr ipaddr # 创建swarm
  --advertise-addr参数表示其它swarm中的worker节点使用此ip地址与manager联系。命令的输出包含了其它节点如何加入集群的命令
  # 这条命令会生成一串可执行的命令 在worker端执行，如果忘记了可以执行 docker swarm join-token worker 进行查看
docker swarm join-token worker # 查看manager token

docker info 和 docker node ls # 查看集群中的相关信息


docker service create --replicas 1 --name helloworld alpine ping docker.com
  --replicas参数指定启动的服务由几个实例组成；
  --name 参数指定启动服务的服务名；
  alpine ping docker.com指定了使用alpine镜像创建服务，实例启动时运行ping docker.com命令。
docker service inspect --pretty helloworld # 查看服务信息
  --pretty 不加--pretty可以输出更详细的信息 就是json串
docker service ps <SERVICE-ID> # 查询到哪个节点正在运行该服务
docker service scale <SERVICE-ID>=<NUMBER-OF-TASKS> # 扩展服务
docker service update --image tomcat:8.6.0 tomcat-service # 用于完成服务版本的更新
docker service update <SERVICE-ID> # 重新启动一个暂停更新的服务


docker node update --availability drain <Node-ID> # 停止Worker节点上的服务
docker node update --availability active <NODE-ID> # 服务节点的启用
docker node inspect --pretty <Node-ID> # 查看节点状态


docker service inspect –pretty 以便于阅读的格式显示服务的详细信息

# 创建服务
docker service create \
  --image nginx \
  --replicas 2 \
  nginx

# 更新服务
docker service update \
  --image nginx:alpine \
  nginx

# 删除服务
docker service rm nginx

# 减少服务实例(这比直接删除服务要好)
docker service scale nginx=0

# 增加服务实例
docker service scale nginx=5

# 查看所有服务
docker service ls

# 查看服务的容器状态
docker service ps nginx

# 查看服务的详细信息。
docker service inspect nginx




【Build and start Harbor】

$ sudo docker-compose up -d
Creating harbor_log_1
Creating harbor_mysql_1
Creating harbor_registry_1
Creating harbor_ui_1
Creating harbor_proxy_1


【Stop Harbor】

$ sudo docker-compose stop
Stopping harbor_proxy_1 ... done
Stopping harbor_ui_1 ... done
Stopping harbor_registry_1 ... done
Stopping harbor_mysql_1 ... done
Stopping harbor_log_1 ... done
Restart Harbor after stopping

【Start Harbor】

$ sudo docker-compose start
Starting harbor_log_1
Starting harbor_mysql_1
Starting harbor_registry_1
Starting harbor_ui_1
Starting harbor_proxy_1
Remove Harbor's containers while keeping the image data and Harbor's database files on the file system:

【删除Harbor】

$ sudo docker-compose rm
Going to remove harbor_proxy_1, harbor_ui_1, harbor_registry_1, harbor_mysql_1, harbor_log_1
Are you sure? [yN] y
Removing harbor_proxy_1 ... done
Removing harbor_ui_1 ... done
Removing harbor_registry_1 ... done
Removing harbor_mysql_1 ... done
Remove Harbor's database and image data (for a clean re-installation):

$ rm -rf /data/database
$ rm -rf /data/registry


# 修改 各节点显示的hostname 名字
hostnamectl set-hostname swarm-node-104(节点名)
service docker restart 重启生效

# 升级
docker service update --image 10.168.16.103/library/spring-cloud-gateway:1.0.6 cloud-getway

# 回滚
docker service rollback cloud-getway
