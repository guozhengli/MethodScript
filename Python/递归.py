#!/usr/env python
# -*- coding:utf8 -*-
__author__ = '李国征'
__email__ = "745292907@qq.com"
########################################################################################################
# 版本: python 3.6
# 编辑日期: 2019/02/25
# 功能: 递归的使用
# 依赖包: python
# 运行方法: python 递归.py
########################################################################################################



# 一个简易的递归
# ----- start -----

# def func():
#     print("递归")
#     func()
#
# func()
# RecursionError: maximum recursion depth exceeded while calling a Python object
# 但是这个会报错，因为python的内存保护机制 限制递归层数不大于1000 这个值可以修改，但不建议修改。如果超过1000的话最好别用递归方式了。
# -----  end  -----


# 简易递归例子
# ----- start -----
# 题目： 求张三岁数   张三 n=1
# 知道李四比张三大2岁 李四 n=2
# 知道王五比李四大2岁 王五  n=3
# 知道赵六比王五大2岁 赵六  n =4
# 知道赵六是30岁

# def age(n):
#     if n == 4:
#         return 30
#     if n > 0 and n < 4:
#         return age(n+1) +2
#
# cc =age(1)
# print(cc)

# 递归 故： 递   归 分开来理解 可以理解走了一个圆 递从上到下，然后在回归 从下到上。
# 递归： 函数引用本身。
# -----  end  -----





